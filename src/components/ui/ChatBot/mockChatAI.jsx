import { mockCourses } from '../../../data/mockData';

export function getAIResponse(input) {
    // Chuy·ªÉn vƒÉn b·∫£n th√†nh ch·ªØ th∆∞·ªùng v√† lo·∫°i b·ªè d·∫•u c√¢u ƒë∆°n gi·∫£n
    const query = input.toLowerCase(); 
    const courses = [...mockCourses]; // tr√°nh thay ƒë·ªïi g·ªëc
    // L·ªçc danh s√°ch c√°c kh√≥a h·ªçc `mockCourses` ƒë·ªÉ t√¨m nh·ªØng kh√≥a h·ªçc kh·ªõp v·ªõi t·ª´ kh√≥a t√¨m ki·∫øm.
    const matchedCourses = mockCourses.filter(course =>
    // Ki·ªÉm tra xem t·ª´ kh√≥a c√≥ xu·∫•t hi·ªán trong t√™n kh√≥a h·ªçc kh√¥ng.
    course.name.toLowerCase().includes(query) ||
    // Ki·ªÉm tra xem t·ª´ kh√≥a c√≥ xu·∫•t hi·ªán trong m√¥ t·∫£ ƒë·∫ßy ƒë·ªß kh√¥ng.
    course.fullDescription.toLowerCase().includes(query) ||
    // Ki·ªÉm tra xem t·ª´ kh√≥a c√≥ xu·∫•t hi·ªán trong danh m·ª•c kh√¥ng.
    course.category.toLowerCase().includes(query) ||
    // Ki·ªÉm tra xem c√≥ b·∫•t k·ª≥ th·∫ª (tag) n√†o ch·ª©a t·ª´ kh√≥a kh√¥ng.
    course.tags.some(tag => tag.toLowerCase().includes(query))
  );

  // N·∫øu t√¨m th·∫•y √≠t nh·∫•t m·ªôt kh√≥a h·ªçc ph√π h·ª£p.
  if (matchedCourses.length > 0  ) {
    // Tr·∫£ v·ªÅ m·ªôt tin nh·∫Øn th√¥ng b√°o th√†nh c√¥ng v√† danh s√°ch c√°c kh√≥a h·ªçc ƒë√£ t√¨m th·∫•y.
    return {
      text: `üìå T√¨m th·∫•y ${matchedCourses.length} kh√≥a h·ªçc ph√π h·ª£p v·ªõi y√™u c·∫ßu c·ªßa b·∫°n:`,
      suggestions: matchedCourses
    };
  }

  
  // N·∫øu kh√¥ng t√¨m th·∫•y kh√≥a h·ªçc n√†o.
  // Tr·∫£ v·ªÅ m·ªôt tin nh·∫Øn th√¥ng b√°o kh√¥ng t√¨m th·∫•y v√† m·ªôt m·∫£ng r·ªóng cho c√°c g·ª£i √Ω.
  return {
    text: `üò¢ Xin l·ªói, t√¥i ch∆∞a t√¨m th·∫•y kho√° h·ªçc n√†o ph√π h·ª£p. B·∫°n c√≥ th·ªÉ th·ª≠ l·∫°i v·ªõi t·ª´ kho√° nh∆∞ "Ti·∫øng anh", "IELTS", "Luy·ªán t·∫≠p", "Chi·∫øn l∆∞·ª£c"...`,
    suggestions: []
  };
}

/**
 * üí° L·∫•y ra danh s√°ch c√°c t·ª´ kh√≥a g·ª£i √Ω ban ƒë·∫ßu ƒë·ªÉ hi·ªÉn th·ªã cho ng∆∞·ªùi d√πng.
 * H√†m n√†y s·∫Ω thu th·∫≠p t·∫•t c·∫£ c√°c 'category' v√† 'tags' t·ª´ d·ªØ li·ªáu
 * v√† lo·∫°i b·ªè c√°c gi√° tr·ªã tr√πng l·∫∑p.
 * @returns {Array<string>} - M·ªôt m·∫£ng ch·ª©a c√°c t·ª´ kh√≥a g·ª£i √Ω ƒë·ªôc nh·∫•t.
 */
export function getInitialSuggestions() {
  // D√πng Set ƒë·ªÉ ƒë·∫£m b·∫£o m·ªói t·ª´ kh√≥a ch·ªâ xu·∫•t hi·ªán m·ªôt l·∫ßn.
  const keywordSet = new Set();

  // L·∫∑p qua t·∫•t c·∫£ c√°c kh√≥a h·ªçc trong d·ªØ li·ªáu.
  mockCourses.forEach(course => {
    // Th√™m danh m·ª•c (category) c·ªßa kh√≥a h·ªçc v√†o Set.
    if (course.category) {
      keywordSet.add(course.category);
    }
    // Th√™m t·∫•t c·∫£ c√°c th·∫ª (tags) c·ªßa kh√≥a h·ªçc v√†o Set.
    if (course.tags && course.tags.length > 0) {
      course.tags.forEach(tag => keywordSet.add(tag));
    }
  });

  // Chuy·ªÉn Set tr·ªü l·∫°i th√†nh m·ªôt m·∫£ng v√† tr·∫£ v·ªÅ.
  // B·∫°n c√≥ th·ªÉ th√™m logic ƒë·ªÉ gi·ªõi h·∫°n s·ªë l∆∞·ª£ng ho·∫∑c x√°o tr·ªôn n·∫øu mu·ªën.
  // V√≠ d·ª•: return Array.from(keywordSet).slice(0, 5); // Ch·ªâ l·∫•y 5 g·ª£i √Ω ƒë·∫ßu ti√™n
  return Array.from(keywordSet).slice(0, 8);
}

export function extractKeyword(text) {
  // Chuy·ªÉn vƒÉn b·∫£n th√†nh ch·ªØ th∆∞·ªùng v√† lo·∫°i b·ªè d·∫•u c√¢u ƒë∆°n gi·∫£n
  const cleanText = text.toLowerCase().replace(/[?.!]/g, '');

  // Danh s√°ch t·ª´ kh√≥a c√≥ trong mockCourses
  const allKeywords = new Set();
  mockCourses.forEach(course => {
    allKeywords.add(course.category.toLowerCase());
    course.tags.forEach(tag => allKeywords.add(tag.toLowerCase()));
    allKeywords.add(course.name.toLowerCase());
  });

  // T√¨m t·ª´ kh√≥a n√†o c√≥ trong c√¢u ng∆∞·ªùi d√πng
  for (const keyword of allKeywords) {
    if (cleanText.includes(keyword)) {
      return keyword;
    }
  }

  // Kh√¥ng t√¨m th·∫•y th√¨ tr·∫£ nguy√™n c√¢u ƒë·ªÉ fallback
  return text;
}
