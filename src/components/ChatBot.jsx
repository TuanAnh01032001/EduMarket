import React, { useState, useEffect } from "react";
import {
  getAIResponse,
  getInitialSuggestions,
  extractKeyword,
} from "../components/ui/ChatBot/mockChatAI";

const Chatbot = ({ onViewCourse }) => {
  // State ƒë·ªÉ l∆∞u tr·ªØ l·ªãch s·ª≠ c√°c tin nh·∫Øn trong cu·ªôc tr√≤ chuy·ªán (c·∫£ ng∆∞·ªùi d√πng v√† bot).
  const [messages, setMessages] = useState([]);
  // State ƒë·ªÉ qu·∫£n l√Ω gi√° tr·ªã hi·ªán t·∫°i c·ªßa √¥ nh·∫≠p li·ªáu c·ªßa ng∆∞·ªùi d√πng.
  const [input, setInput] = useState("");
  // State ƒë·ªÉ l∆∞u gi·ªØ c√°c g·ª£i √Ω kh√≥a h·ªçc ƒë∆∞·ª£c tr·∫£ v·ªÅ t·ª´ AI.
  const [suggestions, setSuggestions] = useState([]);
  // State  ƒë·ªÉ l∆∞u c√°c g·ª£i √Ω t·ª´ kh√≥a ban ƒë·∫ßu.
  const [initialKeywords, setInitialKeywords] = useState([]);

  // useEffect ƒë·ªÉ l·∫•y g·ª£i √Ω v√† hi·ªÉn th·ªã tin nh·∫Øn ch√†o m·ª´ng ch·ªâ m·ªôt l·∫ßn khi component ƒë∆∞·ª£c t·∫£i.
  useEffect(() => {
    // G·ªçi h√†m ƒë·ªÉ l·∫•y c√°c t·ª´ kh√≥a g·ª£i √Ω.
    const keywords = getInitialSuggestions();
    // C·∫≠p nh·∫≠t state v·ªõi c√°c t·ª´ kh√≥a v·ª´a l·∫•y.
    setInitialKeywords(keywords);

    // Th√™m m·ªôt tin nh·∫Øn ch√†o m·ª´ng ban ƒë·∫ßu v√†o cu·ªôc tr√≤ chuy·ªán.
    setMessages([
      {
        sender: "bot",
        text: "Ch√†o b·∫°n! B·∫°n ƒëang mu·ªën t√¨m kh√≥a h·ªçc v·ªÅ ch·ªß ƒë·ªÅ g√¨?",
      },
    ]);
  }, []); // M·∫£ng r·ªóng `[]` ƒë·∫£m b·∫£o useEffect n√†y ch·ªâ ch·∫°y 1 l·∫ßn duy nh·∫•t khi component mount.

  /**
   * X·ª≠ l√Ω h√†nh ƒë·ªông g·ª≠i tin nh·∫Øn.
   * H√†m n√†y s·∫Ω x·ª≠ l√Ω ƒë·∫ßu v√†o c·ªßa ng∆∞·ªùi d√πng, nh·∫≠n ph·∫£n h·ªìi t·ª´ AI m√¥ ph·ªèng,
   * v√† c·∫≠p nh·∫≠t c√°c state c·ªßa cu·ªôc tr√≤ chuy·ªán v√† g·ª£i √Ω.
   * c√≥ th·ªÉ nh·∫≠n ƒë·∫ßu v√†o tr·ª±c ti·∫øp t·ª´ c√°c n√∫t g·ª£i √Ω.
   */
  const handleSend = (textToSend) => {
    const messageText = textToSend || input;
    if (!messageText.trim()) return;

    const userMessage = { sender: "user", text: messageText };

    // üëâ Tr√≠ch xu·∫•t t·ª´ kh√≥a ch√≠nh t·ª´ c√¢u
    const keyword = extractKeyword(messageText);

    // üëâ Truy·ªÅn t·ª´ kh√≥a ƒë√≥ v√†o h√†m t√¨m ki·∫øm
    const ai = getAIResponse(keyword);

    setMessages((prev) => [
      ...prev,
      userMessage,
      { sender: "bot", text: ai.text },
    ]);

    setSuggestions(ai.suggestions);

    if (!textToSend) setInput("");
  };

  // Render giao di·ªán ng∆∞·ªùi d√πng (UI) c·ªßa component Chatbot.
  return (
    // Th·∫ª div ch√≠nh ch·ª©a c·ª≠a s·ªï chatbot v·ªõi v·ªã tr√≠ c·ªë ƒë·ªãnh v√† c√°c style ƒë∆∞·ª£c ƒë·ªãnh s·∫µn.
    <div className="w-[360px] h-[500px] fixed bottom-20 right-6 bg-white shadow-xl rounded-lg flex flex-col overflow-hidden z-50">
      {/* Ti√™u ƒë·ªÅ (header) c·ªßa Chatbot */}
      <div className="bg-blue-600 text-white p-3 font-semibold">
        ü§ñ T∆∞ v·∫•n AI
      </div>

      {/* Khu v·ª±c hi·ªÉn th·ªã tin nh·∫Øn */}
      <div className="flex-1 overflow-y-auto p-3 space-y-2 bg-gray-50">
        {/* L·∫∑p qua m·∫£ng `messages` ƒë·ªÉ hi·ªÉn th·ªã t·ª´ng tin nh·∫Øn */}
        {messages.map((msg, i) => (
          <div
            key={i}
            // √Åp d·ª•ng c√°c style kh√°c nhau t√πy thu·ªôc v√†o ng∆∞·ªùi g·ª≠i l√† ng∆∞·ªùi d√πng hay bot.
            className={`p-2 rounded max-w-[80%] ${
              msg.sender === "user"
                ? "ml-auto bg-blue-100 text-right"
                : "bg-gray-200"
            }`}
          >
            {msg.text}
          </div>
        ))}
      </div>

      {/* üí° HI·ªÇN TH·ªä C√ÅC T·ª™ KH√ìA G·ª¢I √ù BAN ƒê·∫¶U */}
      {/* Ch·ªâ hi·ªÉn th·ªã khi cu·ªôc tr√≤ chuy·ªán m·ªõi b·∫Øt ƒë·∫ßu (ch·ªâ c√≥ 1 tin nh·∫Øn ch√†o c·ªßa bot). */}
      {messages.length === 1 && (
        <div className="p-2">
          <p className="text-sm text-gray-600 mb-2">Ho·∫∑c th·ª≠ c√°c t·ª´ kh√≥a:</p>
          <div className="flex flex-wrap gap-2">
            {initialKeywords.map((keyword, i) => (
              <button
                key={i}
                // üí° Khi nh·∫•n v√†o n√∫t, g·ªçi `handleSend` v√† truy·ªÅn th·∫≥ng t·ª´ kh√≥a v√†o.
                onClick={() => handleSend(keyword)}
                className="bg-blue-100 text-blue-800 text-sm px-3 py-1 rounded-full hover:bg-blue-200 transition-colors"
              >
                {keyword}
              </button>
            ))}
          </div>
        </div>
      )}

      {/* Khu v·ª±c nh·∫≠p li·ªáu ƒë·ªÉ ng∆∞·ªùi d√πng g√µ tin nh·∫Øn */}
      <div className="p-3 border-t flex gap-2">
        <input
          className="flex-1 border px-3 py-2 rounded"
          placeholder="B·∫°n mu·ªën h·ªçc g√¨?"
          value={input}
          // C·∫≠p nh·∫≠t state `input` khi ng∆∞·ªùi d√πng g√µ.
          onChange={(e) => setInput(e.target.value)}
          // Cho ph√©p g·ª≠i tin nh·∫Øn b·∫±ng c√°ch nh·∫•n ph√≠m 'Enter'.
          onKeyDown={(e) => e.key === "Enter" && handleSend()}
        />
        <button
          onClick={() => handleSend()}
          className="bg-blue-600 text-white px-4 py-2 rounded hover:bg-blue-700"
        >
          G·ª≠i
        </button>
      </div>

      {/* Hi·ªÉn th·ªã khu v·ª±c g·ª£i √Ω m·ªôt c√°ch c√≥ ƒëi·ªÅu ki·ªán n·∫øu c√≥ b·∫•t k·ª≥ g·ª£i √Ω n√†o */}
      {suggestions.length > 0 && (
        <div className="p-3 border-t bg-white max-h-[150px] overflow-y-auto">
          <p className="text-sm font-semibold mb-1">üìö G·ª£i √Ω kh√≥a h·ªçc:</p>
          {suggestions.map((course) => (
            <button
              key={course.id}
              onClick={() => onViewCourse(course)}
              className="text-left w-full mb-2 p-2 rounded hover:bg-gray-100 transition-all border"
            >
              <p className="font-medium text-blue-700 underline">
                {course.name}
              </p>
              <p className="text-gray-500 text-sm text-wrap line-clamp-2">
                {course.shortDescription}
              </p>
            </button>
          ))}
        </div>
      )}
    </div>
  );
};

export default Chatbot;
